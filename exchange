
#ifndef ATNHBAFIELDDRIVER_ATENA_H
#define ATNHBAFIELDDRIVER_ATENA_H

#include <QJsonObject>

#include "CommAtena/cansoftlux.h"

#include "RtObjects/pdsx/abstractpdsx.h"
#include "RtObjects/pdsx/pdsxfactory.h"
#include "RtObjects/interface/abstractinterface.h"

//#include "../AtnHbaCore/Modules/mod_fieldmap.h"
//#include "../AtnHbaCore/Modules/fieldmap/mod_fieldmap.h"
#include "../AtnHbaCore/Modules/fieldmap/tag.h"
#include "../AtnHbaCore/Interfaces/abstractfielddriver.h"

#include "../AtnHbaCore/Modules/AbstractModuleBase.h"

#include "CommAtena/iGenericCommInterface.h"
#include "hwmgr_can.h"
#include "hwmgr_tcp.h"
#include "hwmgr_spi.h"

#include "tagcommand.h"
#include "fieldcommands.h"
#include "CommAtena/configcommand.h"
#include "def_hwtypes.h"

/**
 * @brief The AtnHbaFieldDriver_Atena class
 *
 * Questo oggetto Ã¨ quello che si occupa dell'associazione tra comunicazione e lista degli oggetti domotici
 *
 */
class AtnHbaFieldDriver_Atena: public AbstractModuleBase, public AbstractFieldDriver
{
    Q_OBJECT

    enum en_Comm_Types{
        COMM_TYPE_TCP,
        COMM_TYPE_CAN,
        COMM_TYPE_SPICAN
    };

public:
    AtnHbaFieldDriver_Atena();
    AtnHbaFieldDriver_Atena(int commType, QString par1, QString par2);

    void CreateFieldMap();

    bool Start();
    bool Stop();
    bool Action(QString command);

    void setCommunicationType(int commType, QString par1, QString par2);

    QMap<int, AbstractPdsx *>* getListPdsx();

private:
    CanSoftLux *m_CanSoftLux;           // Gestore protocollo di comunicazione
    HwMgr_Can * m_CommCan;              // Modulo di comunicazione CAN
    HwMgr_Tcp * m_CommTcp;              // Modulo di comunicazione TCP/IP
    HwMgr_Spi * m_CommSpi;              // Modulo di comunicazione SPI

    int m_CommType;
    iGenericCommInterface * m_Comm;

    //config command download
    ConfigCommand *m_ConfigCommand;

    //Mod_FieldMap * m_FieldMap;

    void LinkModules();

    QMap<int, AbstractPdsx *> m_ListPdsX;

    void CreateTags(AbstractPdsx* pdsx);
    void CreateTagDriverParameters(Tag *, AbstractInterface *);
    QMap<QString, QString> CreateTagDriverParameters(AbstractInterface *itf);

    AbstractPdsx * findPdsx (Address &host);
    AbstractPdsx * findPdsx (quint16 can);
    void NewPdsXCommons(AbstractPdsx *pdsx, Address address);
    AbstractPdsx * addNewPdsx (int intType, quint16 intCanAdr, QString strDescription);
    AbstractPdsx * addNewPdsx(AbstractPdsx* pdsx);
    AbstractPdsx * addNewPdsx (Address &host);                                                  // aggiunge un nuovo pdsx. da field
    void ActivateSignalSlotGeneric(AbstractPdsx *pdsx);                                         // connect vari

    void CheckFolders();
    bool LoadConfiguration(QJsonObject objCfg);

private slots:
    void slotLog(QString str);
    /*
     *  Slot relativi a ricezione dati CAN
     */
    void slotRxFromCanSingleInput (Address&,int);
    void slotRxFromCanSingleSabotaggio (Address&,int);
    void slotRxFromCanMultiDigitalInput(Address&,int);
    void slotRxFromCanMultiDigitalSabotaggio(Address&,int);
    void slotRxFromCanMultiAnalogInput (Address&,int,int);
    void slotRxFromCanEventoOutput (Address&,int,int);
    void slotRxFromCanMultiOutput (Address &,int,int);
    void slotRxFromCanSingleAnalogInput(Address &, int);
    void slotCanRxMultiDigitalAnalogDigitalizzato(Address&,int);
    void slotRxFromCanId(Address&, int, int, int, int, bool bBootloader, bool bLoader, bool bAgg);
    void slotRxFromCanId2(Address& address, int stato, int fw_bootloader, bool bBootloader, int prodotto, int vershw, int matricola);
    void slotRxFromCanCfgDescr (Address&,QString&);
    void slotRxFromCanCfgInputAnalog (Address &, int, int);
    void slotRxFromCanCfgDescrInput (Address&,QString&);
    void slotRxFromCanCfgDescrOutput (Address&,QString&);
    void slotRxFromCanDigitalOutput (Address&,int,int,int,int);
    void slotRxFromCanSerialnumber(Address &address, QString &sn);

    void slotRxFromCanCfgDigitalOutputNome(Address&, quint8, quint8, QString);

    void slotTimerTest();
    void slotChangeFromField (AbstractInterface* ifcSender);
    void slotMessageForDriver(QList<QByteArray> &message);
    void slotTagCommand(QByteArray command);
    void slotTagCommand(TagCommand command);
    void slotFieldCommand(en_Field_Command_Types_t fieldcommand);
    void slotDownloadRete();
    void slotConfigCompleted();
    void slotGestoreOutput(quint16 IdCan, quint8 slot, quint8 numTrigger, quint8 typeTrigger);

signals:
    void sgnlNewTag(QString key, int mode, int type, QMap<QString, QString> params, AbstractInterface* ifc, int dir, QString driverstr);        // Notifica che deve essere inserita in un nuovo tag (Prevedere di passare tutte le informazioni necessarie a generare un tag
    void sgnlTagValueChanged(QString tagId, float value);                           // Notifica che il tag ha cambiato valore
    void sgnlSendDigitalOutput(Address&,AbstractMessageEvent&);
    void sgnlSendLiveCommand();                                                     // Stato in vita SINERGIBOX
    void sgnlSaveMap();                                                             // Salvataggio mappa di campo a download completato

};

#endif  // ATNHBAFIELDDRIVER_ATENA_H
